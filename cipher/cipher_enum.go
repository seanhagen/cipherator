// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package cipher

import (
	"fmt"
)

const (
	// EncoderTypePiglatin is a EncoderType of type Piglatin.
	EncoderTypePiglatin EncoderType = iota
	// EncoderTypeReverse is a EncoderType of type Reverse.
	EncoderTypeReverse
)

const _EncoderTypeName = "piglatinreverse"

var _EncoderTypeMap = map[EncoderType]string{
	EncoderTypePiglatin: _EncoderTypeName[0:8],
	EncoderTypeReverse:  _EncoderTypeName[8:15],
}

// String implements the Stringer interface.
func (x EncoderType) String() string {
	if str, ok := _EncoderTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("EncoderType(%d)", x)
}

var _EncoderTypeValue = map[string]EncoderType{
	_EncoderTypeName[0:8]:  EncoderTypePiglatin,
	_EncoderTypeName[8:15]: EncoderTypeReverse,
}

// ParseEncoderType attempts to convert a string to a EncoderType.
func ParseEncoderType(name string) (EncoderType, error) {
	if x, ok := _EncoderTypeValue[name]; ok {
		return x, nil
	}
	return EncoderType(0), fmt.Errorf("%s is not a valid EncoderType", name)
}

// MarshalText implements the text marshaller method.
func (x EncoderType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *EncoderType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseEncoderType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
